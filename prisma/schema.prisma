// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["trademart"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  phone         String?
  passwordHash  String?   @map("password_hash")
  role          String    @default("buyer") // buyer | supplier | admin
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations
  supplier      Supplier?
  buyerRfqs     Rfq[]     @relation("BuyerRfqs")
  buyerTransactions Transaction[] @relation("BuyerTransactions")
  buyerReviews  SupplierReview[] @relation("BuyerReviews")
  productReviews ProductReview[] @relation("ProductReviews")
  
  // NextAuth.js fields
  accounts      Account[]
  sessions      Session[]

  @@map("users")
  @@schema("trademart")
}

model Supplier {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  companyName String   @map("company_name")
  industry    String?
  businessType String? @map("business_type")
  website     String?
  description String?
  country    String?
  city       String?
  address    String?
  postalCode String? @map("postal_code")
  phone      String?
  verified    Boolean  @default(false)
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  totalOrders Int      @default(0) @map("total_orders")
  responseTime String? @map("response_time")
  minOrderValue Decimal? @map("min_order_value") @db.Decimal(12, 2)
  currency   String?  @default("USD")
  establishedYear Int? @map("established_year")
  employees  String?
  specialties String[] @default([])
  certifications String[] @default([])
  contactEmail String? @map("contact_email")
  contactPhone String? @map("contact_phone")
  businessInfo Json? @map("business_info") // Store additional business data as JSON
  lastActive DateTime? @map("last_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes      Quote[]
  products    Product[]
  reviews     SupplierReview[]
  supplierTransactions Transaction[] @relation("SupplierTransactions")

  @@map("suppliers")
  @@schema("trademart")
}

model Product {
  id              String   @id @default(cuid())
  supplierId      String   @map("supplier_id")
  name            String
  description     String
  category        String
  subcategory     String?
  price           Decimal  @db.Decimal(12, 2)
  currency        String   @default("USD")
  minOrderQuantity Int     @map("min_order_quantity")
  unit            String
  specifications  Json?    // Store product specifications as JSON
  features        String[] @default([])
  tags            String[] @default([])
  images          String[] @default([])
  inStock         Boolean  @default(true) @map("in_stock")
  stockQuantity   Int?     @map("stock_quantity")
  leadTime        String?  @map("lead_time")
  views           Int      @default(0)
  orders          Int      @default(0)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  supplier        Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  productReviews  ProductReview[]

  @@map("products")
  @@schema("trademart")
}

model Rfq {
  id          String   @id @default(cuid())
  buyerId     String   @map("buyer_id")
  title       String
  description String
  category    String?
  subcategory String?
  quantity    Int?
  unit        String?
  budget      Decimal? @db.Decimal(12, 2)
  currency    String?  @default("USD")
  status      String   @default("open") // open | quoted | closed
  requirements String[] @default([])
  specifications Json? // Store RFQ specifications as JSON
  attachments String[] @default([])
  additionalInfo String? @map("additional_info")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  buyer       User     @relation("BuyerRfqs", fields: [buyerId], references: [id])
  quotes      Quote[]
  transactions Transaction[]

  @@map("rfqs")
  @@schema("trademart")
}

model Quote {
  id            String   @id @default(cuid())
  rfqId         String   @map("rfq_id")
  supplierId    String   @map("supplier_id")
  price         Decimal  @db.Decimal(12, 2)
  currency      String   @default("USD")
  leadTimeDays  Int      @map("lead_time_days")
  notes         String?
  status        String   @default("pending") // pending | accepted | rejected
  whatsappSent  Boolean  @default(false) @map("whatsapp_sent")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  rfq           Rfq      @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  supplier      Supplier @relation(fields: [supplierId], references: [id])

  @@map("quotes")
  @@schema("trademart")
}

model SupplierReview {
  id          String   @id @default(cuid())
  supplierId  String   @map("supplier_id")
  buyerId     String   @map("buyer_id")
  rating      Int      // 1-5 stars
  comment     String?
  orderValue  Decimal? @map("order_value") @db.Decimal(12, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  buyer       User     @relation("BuyerReviews", fields: [buyerId], references: [id])

  @@map("supplier_reviews")
  @@schema("trademart")
}

model ProductReview {
  id          String   @id @default(cuid())
  productId   String   @map("product_id")
  buyerId     String   @map("buyer_id")
  rating      Int      // 1-5 stars
  comment     String?
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  buyer       User     @relation("ProductReviews", fields: [buyerId], references: [id])

  @@map("product_reviews")
  @@schema("trademart")
}

model Transaction {
  id          String   @id @default(cuid())
  buyerId     String   @map("buyer_id")
  supplierId  String   @map("supplier_id")
  rfqId       String   @map("rfq_id")
  amount      Decimal  @db.Decimal(12, 2)
  status      String   @default("held") // held | released | refunded
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  buyer       User     @relation("BuyerTransactions", fields: [buyerId], references: [id])
  supplier    Supplier @relation("SupplierTransactions", fields: [supplierId], references: [id])
  rfq         Rfq      @relation(fields: [rfqId], references: [id])

  @@map("transactions")
  @@schema("trademart")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("trademart")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("trademart")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("trademart")
}
