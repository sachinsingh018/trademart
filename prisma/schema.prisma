generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["trademart"]
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String           @unique
  phone             String?
  passwordHash      String?          @map("password_hash")
  role              String           @default("buyer")
  createdAt         DateTime         @default(now()) @map("created_at")
  accounts          Account[]
  productReviews    ProductReview[]  @relation("ProductReviews")
  serviceReviews    ServiceReview[]  @relation("ServiceReviews")
  serviceQuotes     ServiceQuote[]   @relation("ServiceQuotes")
  buyerRfqs         Rfq[]            @relation("BuyerRfqs")
  sessions          Session[]
  buyerReviews      SupplierReview[] @relation("BuyerReviews")
  supplier          Supplier?
  buyerTransactions Transaction[]    @relation("BuyerTransactions")
  fileUploads       FileUpload[]
  notifications     Notification[]

  @@map("users")
  @@schema("trademart")
}

model Supplier {
  id                   String           @id @default(cuid())
  userId               String           @unique @map("user_id")
  companyName          String           @map("company_name")
  industry             String?
  businessType         String?          @map("business_type")
  website              String?
  description          String?
  country              String?
  city                 String?
  address              String?
  postalCode           String?          @map("postal_code")
  phone                String?
  verified             Boolean          @default(false)
  rating               Decimal          @default(0) @db.Decimal(3, 2)
  totalOrders          Int              @default(0) @map("total_orders")
  responseTime         String?          @map("response_time")
  minOrderValue        Decimal?         @map("min_order_value") @db.Decimal(12, 2)
  currency             String?          @default("USD")
  establishedYear      Int?             @map("established_year")
  employees            String?
  specialties          String[]         @default([])
  certifications       String[]         @default([])
  contactEmail         String?          @map("contact_email")
  contactPhone         String?          @map("contact_phone")
  businessInfo         Json?            @map("business_info")
  companyLogo          String?          @map("company_logo")
  lastActive           DateTime?        @map("last_active")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  products             Product[]
  services             Service[]
  quotes               Quote[]
  serviceQuotes        ServiceQuote[]
  reviews              SupplierReview[]
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  supplierTransactions Transaction[]    @relation("SupplierTransactions")

  @@map("suppliers")
  @@schema("trademart")
}

model Product {
  id               String          @id @default(cuid())
  supplierId       String          @map("supplier_id")
  name             String
  description      String
  category         String
  subcategory      String?
  price            Decimal         @db.Decimal(12, 2)
  currency         String          @default("USD")
  minOrderQuantity Int             @map("min_order_quantity")
  unit             String
  specifications   Json?
  features         String[]        @default([])
  tags             String[]        @default([])
  images           String[]        @default([])
  inStock          Boolean         @default(true) @map("in_stock")
  stockQuantity    Int?            @map("stock_quantity")
  leadTime         String?         @map("lead_time")
  views            Int             @default(0)
  orders           Int             @default(0)
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  productReviews   ProductReview[]
  supplier         Supplier        @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("products")
  @@schema("trademart")
}

model Service {
  id               String          @id @default(cuid())
  supplierId       String          @map("supplier_id")
  name             String
  description      String
  category         String
  subcategory      String?
  price            Decimal?         @db.Decimal(12, 2)
  currency         String          @default("USD")
  pricingModel     String          @default("fixed") // fixed, hourly, project, custom
  minDuration      Int?            @map("min_duration") // in days
  maxDuration      Int?            @map("max_duration") // in days
  unit             String          @default("project")
  specifications   Json?
  features         String[]        @default([])
  tags             String[]        @default([])
  images           String[]        @default([])
  isAvailable      Boolean         @default(true) @map("is_available")
  leadTime         String?         @map("lead_time")
  views            Int             @default(0)
  orders           Int             @default(0)
  rating           Decimal?        @db.Decimal(3, 2)
  reviews          Int             @default(0)
  deliveryMethod   String?         @map("delivery_method") // remote, on-site, hybrid
  experience       String?         // years of experience
  certifications   String[]        @default([])
  portfolio        String[]        @default([])
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  serviceReviews   ServiceReview[]
  serviceQuotes    ServiceQuote[]
  supplier         Supplier        @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("services")
  @@schema("trademart")
}

model Rfq {
  id             String        @id @default(cuid())
  buyerId        String        @map("buyer_id")
  title          String
  description    String
  category       String?
  subcategory    String?
  quantity       Int?
  unit           String?
  budget         Decimal?      @db.Decimal(12, 2)
  currency       String?       @default("USD")
  status         String        @default("open")
  requirements   String[]      @default([])
  specifications Json?
  attachments    String[]      @default([])
  additionalInfo String?       @map("additional_info")
  expiresAt      DateTime?     @map("expires_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  quotes         Quote[]
  buyer          User          @relation("BuyerRfqs", fields: [buyerId], references: [id])
  transactions   Transaction[]

  @@map("rfqs")
  @@schema("trademart")
}

model Quote {
  id           String   @id @default(cuid())
  rfqId        String   @map("rfq_id")
  supplierId   String   @map("supplier_id")
  price        Decimal  @db.Decimal(12, 2)
  currency     String   @default("USD")
  leadTimeDays Int      @map("lead_time_days")
  notes        String?
  status       String   @default("pending")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  rfq          Rfq      @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  supplier     Supplier @relation(fields: [supplierId], references: [id])

  @@map("quotes")
  @@schema("trademart")
}

model SupplierReview {
  id         String   @id @default(cuid())
  supplierId String   @map("supplier_id")
  buyerId    String   @map("buyer_id")
  rating     Int
  comment    String?
  orderValue Decimal? @map("order_value") @db.Decimal(12, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  buyer      User     @relation("BuyerReviews", fields: [buyerId], references: [id])
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("supplier_reviews")
  @@schema("trademart")
}

model ProductReview {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  buyerId   String   @map("buyer_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  buyer     User     @relation("ProductReviews", fields: [buyerId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
  @@schema("trademart")
}

model ServiceReview {
  id        String   @id @default(cuid())
  serviceId String   @map("service_id")
  buyerId   String   @map("buyer_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  buyer     User     @relation("ServiceReviews", fields: [buyerId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_reviews")
  @@schema("trademart")
}

model ServiceQuote {
  id           String   @id @default(cuid())
  serviceId    String   @map("service_id")
  buyerId      String   @map("buyer_id")
  supplierId   String   @map("supplier_id")
  price        Decimal  @db.Decimal(12, 2)
  currency     String   @default("USD")
  leadTimeDays Int      @map("lead_time_days")
  notes        String?
  status       String   @default("pending")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  service      Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  buyer        User     @relation("ServiceQuotes", fields: [buyerId], references: [id])
  supplier     Supplier @relation(fields: [supplierId], references: [id])

  @@map("service_quotes")
  @@schema("trademart")
}

model Transaction {
  id         String   @id @default(cuid())
  buyerId    String   @map("buyer_id")
  supplierId String   @map("supplier_id")
  rfqId      String   @map("rfq_id")
  amount     Decimal  @db.Decimal(12, 2)
  status     String   @default("held")
  createdAt  DateTime @default(now()) @map("created_at")
  buyer      User     @relation("BuyerTransactions", fields: [buyerId], references: [id])
  rfq        Rfq      @relation(fields: [rfqId], references: [id])
  supplier   Supplier @relation("SupplierTransactions", fields: [supplierId], references: [id])

  @@map("transactions")
  @@schema("trademart")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("trademart")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("trademart")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("trademart")
}

model FileUpload {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  originalName String  @map("original_name")
  fileName    String   @map("file_name")
  fileKey     String   @unique @map("file_key")
  fileSize    Int      @map("file_size")
  contentType String   @map("content_type")
  bucketName  String   @map("bucket_name")
  url         String?
  uploadedAt  DateTime @default(now()) @map("uploaded_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("file_uploads")
  @@schema("trademart")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@schema("trademart")
}
