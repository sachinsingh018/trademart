generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["trademart"]
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String           @unique
  phone             String?
  passwordHash      String?          @map("password_hash")
  role              String           @default("buyer")
  createdAt         DateTime         @default(now()) @map("created_at")
  accounts          Account[]
  productReviews    ProductReview[]  @relation("ProductReviews")
  buyerRfqs         Rfq[]            @relation("BuyerRfqs")
  sessions          Session[]
  buyerReviews      SupplierReview[] @relation("BuyerReviews")
  supplier          Supplier?
  buyerTransactions Transaction[]    @relation("BuyerTransactions")
  notifications      Notification[]
  buyerOrders       Order[]          @relation("BuyerOrders")

  @@map("users")
  @@schema("trademart")
}

model Supplier {
  id                   String           @id @default(cuid())
  userId               String           @unique @map("user_id")
  companyName          String           @map("company_name")
  industry             String?
  businessType         String?          @map("business_type")
  website              String?
  description          String?
  country              String?
  city                 String?
  address              String?
  postalCode           String?          @map("postal_code")
  phone                String?
  verified             Boolean          @default(false)
  rating               Decimal          @default(0) @db.Decimal(3, 2)
  totalOrders          Int              @default(0) @map("total_orders")
  responseTime         String?          @map("response_time")
  minOrderValue        Decimal?         @map("min_order_value") @db.Decimal(12, 2)
  currency             String?          @default("USD")
  establishedYear      Int?             @map("established_year")
  employees            String?
  specialties          String[]         @default([])
  certifications       String[]         @default([])
  contactEmail         String?          @map("contact_email")
  contactPhone         String?          @map("contact_phone")
  businessInfo         Json?            @map("business_info")
  lastActive           DateTime?        @map("last_active")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  gstNumber            String?          @map("gst_number")
  tradeLicenseNumber   String?          @map("trade_license_number")
  verificationTier     String?          @map("verification_tier") // 'unverified', 'basic', 'verified', 'premium'
  lastVerifiedAt       DateTime?        @map("last_verified_at")
  totalPoints          Int              @default(0) @map("total_points")
  products             Product[]
  quotes               Quote[]
  reviews              SupplierReview[]
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  supplierTransactions Transaction[]    @relation("SupplierTransactions")
  supplierOrders       Order[]          @relation("SupplierOrders")
  factoryVerifications FactoryVerification[]
  badgeAwards          BadgeAward[]

  @@map("suppliers")
  @@schema("trademart")
}

model Product {
  id               String          @id @default(cuid())
  supplierId       String          @map("supplier_id")
  name             String
  description      String
  category         String
  subcategory      String?
  price            Decimal         @db.Decimal(12, 2)
  currency         String          @default("USD")
  minOrderQuantity Int             @map("min_order_quantity")
  unit             String
  specifications   Json?
  features         String[]        @default([])
  tags             String[]        @default([])
  images           String[]        @default([])
  inStock          Boolean         @default(true) @map("in_stock")
  stockQuantity    Int?            @map("stock_quantity")
  leadTime         String?         @map("lead_time")
  views            Int             @default(0)
  orders           Int             @default(0)
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  productReviews   ProductReview[]
  supplier         Supplier        @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("products")
  @@schema("trademart")
}

model Rfq {
  id             String        @id @default(cuid())
  buyerId        String        @map("buyer_id")
  title          String
  description    String
  category       String?
  subcategory    String?
  quantity       Int?
  unit           String?
  budget         Decimal?      @db.Decimal(12, 2)
  currency       String?       @default("USD")
  status         String        @default("open")
  requirements   String[]      @default([])
  specifications Json?
  attachments    String[]      @default([])
  additionalInfo String?       @map("additional_info")
  expiresAt      DateTime?     @map("expires_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  quotes         Quote[]
  buyer          User          @relation("BuyerRfqs", fields: [buyerId], references: [id])
  transactions   Transaction[]
  orders         Order[]

  @@map("rfqs")
  @@schema("trademart")
}

model Quote {
  id           String   @id @default(cuid())
  rfqId        String   @map("rfq_id")
  supplierId   String   @map("supplier_id")
  price        Decimal  @db.Decimal(12, 2)
  currency     String   @default("USD")
  leadTimeDays Int      @map("lead_time_days")
  notes        String?
  status       String   @default("pending")
  whatsappSent Boolean  @default(false) @map("whatsapp_sent")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  rfq          Rfq      @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  supplier     Supplier @relation(fields: [supplierId], references: [id])
  orders       Order[]

  @@map("quotes")
  @@schema("trademart")
}

model SupplierReview {
  id         String   @id @default(cuid())
  supplierId String   @map("supplier_id")
  buyerId    String   @map("buyer_id")
  rating     Int
  comment    String?
  orderValue Decimal? @map("order_value") @db.Decimal(12, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  buyer      User     @relation("BuyerReviews", fields: [buyerId], references: [id])
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("supplier_reviews")
  @@schema("trademart")
}

model ProductReview {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  buyerId   String   @map("buyer_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  buyer     User     @relation("ProductReviews", fields: [buyerId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
  @@schema("trademart")
}

model Transaction {
  id         String   @id @default(cuid())
  buyerId    String   @map("buyer_id")
  supplierId String   @map("supplier_id")
  rfqId      String   @map("rfq_id")
  amount     Decimal  @db.Decimal(12, 2)
  status     String   @default("held")
  createdAt  DateTime @default(now()) @map("created_at")
  buyer      User     @relation("BuyerTransactions", fields: [buyerId], references: [id])
  rfq        Rfq      @relation(fields: [rfqId], references: [id])
  supplier   Supplier @relation("SupplierTransactions", fields: [supplierId], references: [id])

  @@map("transactions")
  @@schema("trademart")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("trademart")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("trademart")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String   // 'rfq_created', 'quote_received', 'quote_accepted', 'quote_rejected', 'order_placed', 'order_updated', 'system', 'whatsapp_sent', 'payment_released', 'dispute_created', 'refund_processed'
  title     String
  message   String
  data      String?  // JSON data
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@schema("trademart")
}

model Order {
  id            String   @id @default(cuid())
  buyerId       String   @map("buyer_id")
  supplierId    String   @map("supplier_id")
  rfqId         String?  @map("rfq_id")
  quoteId       String?  @map("quote_id")
  orderNumber   String   @unique @map("order_number")
  status        String   @default("pending") // 'pending', 'confirmed', 'in_production', 'shipped', 'delivered', 'completed', 'cancelled', 'disputed'
  paymentStatus String   @default("pending") // 'pending', 'escrowed', 'paid', 'refunded', 'disputed'
  totalAmount   Decimal  @map("total_amount") @db.Decimal(12, 2)
  currency      String   @default("INR")
  quantity      Int
  unit          String
  deliveryDate  DateTime? @map("delivery_date")
  shippingAddress String @map("shipping_address") @db.Text
  billingAddress  String @map("billing_address") @db.Text
  notes         String?  @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  buyer         User     @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)
  supplier      Supplier @relation("SupplierOrders", fields: [supplierId], references: [id], onDelete: Cascade)
  rfq           Rfq?     @relation(fields: [rfqId], references: [id])
  quote         Quote?   @relation(fields: [quoteId], references: [id])
  escrowAccount EscrowAccount?
  qcReports     QCReport[]

  @@map("orders")
  @@schema("trademart")
}

model EscrowAccount {
  id            String    @id @default(cuid())
  orderId       String    @unique @map("order_id")
  accountNumber String    @unique @map("account_number")
  amount        Decimal   @db.Decimal(12, 2)
  currency      String    @default("INR")
  status        String    @default("pending") // 'pending', 'funded', 'released', 'refunded', 'disputed'
  paymentMethod String?   @map("payment_method")
  transactionId String?   @map("transaction_id")
  fundedAt      DateTime? @map("funded_at")
  releasedAt    DateTime? @map("released_at")
  refundedAt    DateTime? @map("refunded_at")
  refundReason  String?   @map("refund_reason")
  qcPassed      Boolean?  @map("qc_passed")
  createdAt     DateTime  @default(now()) @map("created_at")
  expiresAt     DateTime  @map("expires_at")
  
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("escrow_accounts")
  @@schema("trademart")
}

model QCReport {
  id          String   @id @default(cuid())
  orderId     String   @map("order_id")
  inspectorId String?  @map("inspector_id")
  status      String   @default("pending") // 'pending', 'passed', 'failed', 'disputed'
  photos      String[] @db.Text // Array of photo URLs
  videos      String[] @db.Text // Array of video URLs
  notes       String?  @db.Text
  score       Int?     // QC score out of 100
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("qc_reports")
  @@schema("trademart")
}

model FactoryVerification {
  id              String    @id @default(cuid())
  supplierId      String    @map("supplier_id")
  inspectorId     String?   @map("inspector_id")
  scheduledDate   DateTime  @map("scheduled_date")
  completedAt     DateTime? @map("completed_at")
  address         String    @db.Text
  contactPerson   String    @map("contact_person")
  contactPhone    String    @map("contact_phone")
  verificationType String   @map("verification_type") // 'basic', 'comprehensive', 'audit'
  status          String    @default("scheduled") // 'scheduled', 'in_progress', 'passed', 'failed', 'cancelled'
  inspectorNotes  String?   @map("inspector_notes") @db.Text
  photos          String[]  @db.Text // Array of photo URLs
  documents       String[]  @db.Text // Array of document URLs
  score           Int?     // Verification score out of 100
  recommendations String?   @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  supplier        Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@map("factory_verifications")
  @@schema("trademart")
}

model BadgeAward {
  id         String   @id @default(cuid())
  supplierId String   @map("supplier_id")
  badgeId    String   @map("badge_id")
  awardedAt  DateTime @default(now()) @map("awarded_at")
  
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([supplierId, badgeId])
  @@map("badge_awards")
  @@schema("trademart")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("trademart")
}
